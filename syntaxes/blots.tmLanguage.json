{
  "name": "Blots",
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "scopeName": "source.blots",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#lambdas"
    },
    {
      "include": "#groups"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "match": "//.*$",
          "name": "comment.line.double-slash.blots"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "match": "\\b(true|false)\\b",
          "name": "constant.language.boolean.blots"
        },
        {
          "match": "\\bnull\\b",
          "name": "constant.language.null.blots"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "\\b(if|then|else)\\b",
          "name": "keyword.control.conditional.blots"
        },
        {
          "match": "\\b(do|return)\\b",
          "name": "keyword.control.flow.blots"
        },
        {
          "match": "\\boutput\\b",
          "name": "keyword.other.output.blots"
        },
        {
          "match": "\\b(via|into)\\b",
          "name": "keyword.operator.natural.blots"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "=>",
          "name": "storage.type.function.arrow.blots"
        },
        {
          "match": "\\.\\.\\.",
          "name": "keyword.operator.spread.blots"
        },
        {
          "match": "\\?\\?",
          "name": "keyword.operator.coalesce.blots"
        },
        {
          "match": "\\|\\||&&",
          "name": "keyword.operator.logical.blots"
        },
        {
          "match": "\\b(and|or|not)\\b",
          "name": "keyword.operator.logical.word.blots"
        },
        {
          "match": "==|!=|<=|>=|<|>",
          "name": "keyword.operator.comparison.blots"
        },
        {
          "match": "[+\\-*/%^]",
          "name": "keyword.operator.arithmetic.blots"
        },
        {
          "match": "!",
          "name": "keyword.operator.logical.not.blots"
        },
        {
          "match": "=",
          "name": "keyword.operator.assignment.blots"
        },
        {
          "match": "\\?",
          "name": "keyword.operator.optional.blots"
        },
        {
          "match": "\\.",
          "name": "punctuation.accessor.blots"
        },
        {
          "match": ":",
          "name": "punctuation.separator.key-value.blots"
        },
        {
          "match": ",",
          "name": "punctuation.separator.comma.blots"
        },
        {
          "match": ";",
          "name": "punctuation.terminator.statement.blots"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.blots",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.blots",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.blots",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.blots",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "match": "(?<!\\w)([+-]?\\d+(_+\\d+)*(\\.\\d+)?([eE][+-]?\\d+)?|\\.\\d+([eE][+-]?\\d+)?)\\b",
          "name": "constant.numeric.blots"
        }
      ]
    },
    "lambdas": {
      "patterns": [
        {
          "match": "(\\.\\.\\.)?(\\w+)(\\?)?(?=\\s*=>)",
          "captures": {
            "1": {
              "name": "keyword.operator.spread.blots"
            },
            "2": {
              "name": "variable.parameter.blots"
            },
            "3": {
              "name": "keyword.operator.optional.blots"
            }
          }
        },
        {
          "begin": "\\((?=[^\\n\\)]*\\)[ \t]*=>)",
          "end": "\\)(?=[ \t]*=>)",
          "name": "meta.parameters.blots",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "match": "(\\.\\.\\.)?(\\w+)(\\?)?",
              "captures": {
                "1": {
                  "name": "keyword.operator.spread.blots"
                },
                "2": {
                  "name": "variable.parameter.blots"
                },
                "3": {
                  "name": "keyword.operator.optional.blots"
                }
              }
            },
            {
              "match": ",",
              "name": "punctuation.separator.comma.blots"
            }
          ]
        }
      ]
    },
    "groups": {
      "patterns": [
        {
          "begin": "\\(",
          "end": "\\)",
          "name": "meta.group.blots",
          "patterns": [
            { "include": "#comments" },
            { "include": "#strings" },
            { "include": "#numbers" },
            { "include": "#keywords" },
            { "include": "#operators" },
            { "include": "#identifiers" },
            { "include": "#lambdas" },
            { "include": "#groups" }
          ]
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b",
          "name": "variable.other.blots"
        }
      ]
    }
  }
}
